package main

import (
	"fmt"

	"github.com/v1adis1av28/level2/tasks/task10/internal/config"
	"github.com/v1adis1av28/level2/tasks/task10/internal/reader"
	"github.com/v1adis1av28/level2/tasks/task10/internal/sort"
)

// Реализовать упрощённый аналог UNIX-утилиты sort (сортировка строк).
// Программа должна читать строки (из файла или STDIN) и выводить их отсортированными.
// Обязательные флаги (как в GNU sort):
// -k N — сортировать по столбцу (колонке) №N (разделитель — табуляция по умолчанию).
// Например, «sort -k 2» отсортирует строки по второму столбцу каждой строки.
// -n — сортировать по числовому значению (строки интерпретируются как числа).
// -r — сортировать в обратном порядке (reverse).
// -u — не выводить повторяющиеся строки (только уникальные).
// Дополнительные флаги:
// -M — сортировать по названию месяца (Jan, Feb, ... Dec), т.е. распознавать специфический формат дат.
// -b — игнорировать хвостовые пробелы (trailing blanks).
// -c — проверить, отсортированы ли данные; если нет, вывести сообщение об этом.
// -h — сортировать по числовому значению с учётом суффиксов (например, К = килобайт, М = мегабайт — человекочитаемые размеры).
// Программа должна корректно обрабатывать комбинации флагов (например, -nr — числовая сортировка в обратном порядке, и т.д.).
// Необходимо предусмотреть эффективную обработку больших файлов.
// Код должен проходить все тесты, а также проверки go vet и golint (понимание, что требуются надлежащие комментарии, имена и структура программы).

func main() {
	// парсинг флагов (протестить что в структуре конфига отображаются флаги)
	// чтение входных данных
	// стандартная сортировка
	// вывод результатов
	config := config.ParseConfig()
	fmt.Println(config.CheckSorted, config.IgnoreBlanks, config.HumanNumeric, config.Numeric, config.KeyColumn)

	strs := reader.ReadStdin()

	sort.BaseSort(strs)

}
