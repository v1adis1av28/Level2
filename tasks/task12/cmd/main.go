package main

import (
	"fmt"
	"os"

	"github.com/v1adis1av28/level2/tasks/task12/internal/config"
	"github.com/v1adis1av28/level2/tasks/task12/internal/grep"
)

//task
// Реализовать утилиту фильтрации текстового потока (аналог команды grep).
// Программа должна читать входной поток (STDIN или файл) и выводить строки, соответствующие заданному шаблону (подстроке или регулярному выражению).
// Необходимо поддерживать следующие флаги:
// -A N — после каждой найденной строки дополнительно вывести N строк после неё (контекст).
// -B N — вывести N строк до каждой найденной строки.
// -C N — вывести N строк контекста вокруг найденной строки (включает и до, и после; эквивалентно -A N -B N).
// -c — выводить только то количество строк, что совпадающих с шаблоном (т.е. вместо самих строк — число).
// -i — игнорировать регистр.
// -v — инвертировать фильтр: выводить строки, не содержащие шаблон.
// -F — воспринимать шаблон как фиксированную строку, а не регулярное выражение (т.е. выполнять точное совпадение подстроки).
// -n — выводить номер строки перед каждой найденной строкой.
// Программа должна поддерживать сочетания флагов (например, -C 2 -n -i – 2 строки контекста, вывод номеров, без учета регистра и т.д.).
// Результат работы должен максимально соответствовать поведению команды UNIX grep.
// Обязательно учесть пограничные случаи (начало/конец файла для контекста, повторяющиеся совпадения и пр.).
// Код должен быть чистым, отформатированным (gofmt), работать без ситуаций гонки и успешно проходить golint.

func main() {
	conf, err := config.ParseConfig()
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error: %v\n", err)
		os.Exit(1)
	}

	err = grep.Grep(conf)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error: %v", err)
		os.Exit(1)
	}
}
