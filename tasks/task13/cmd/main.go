package main

import (
	"fmt"
	"os"

	"github.com/v1adis1av28/level2/tasks/task13/internal/cut"
	"github.com/v1adis1av28/level2/tasks/task13/internal/reader"
)

//Реализовать утилиту, которая считывает входные данные (STDIN) и разбивает каждую строку
//по заданному разделителю, после чего выводит определённые поля (колонки).

// Аналог команды cut с поддержкой флагов:
// -f "fields" — указание номеров полей (колонок), которые нужно вывести. Номера через запятую, можно диапазоны.
// Например: «-f 1,3-5» — вывести 1-й и с 3-го по 5-й столбцы.
// -d "delimiter" — использовать другой разделитель (символ). По умолчанию разделитель — табуляция ('\t').
// -s – (separated) только строки, содержащие разделитель.
// Если флаг указан, то строки без разделителя игнорируются (не выводятся).
// Программа должна корректно парсить аргументы, поддерживать различные комбинации
// (например, несколько отдельных полей и диапазонов), учитывать, что номера полей могут выходить за границы
// (в таком случае эти поля просто игнорируются).

// Стоит обратить внимание на эффективность при обработке больших файлов.
// Все стандартные требования по качеству кода и тестам также применимы.

func main() {
	options, err := cut.ParseOption()
	if err != nil {
		fmt.Errorf("Error on parsing options %v", err)
		os.Exit(1)
	}
	data := reader.ReadLine(options.Delimetr)

	cut.Start(data, options)

	//fmt.Println((cut.ParseFieldsFlag("3,4,5-8,11-20,41123")))
}
