–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å ‚Äî –∏ —Ç—ã –∑–∞–¥–∞—ë—à—å –µ–≥–æ **–ø—Ä–∞–≤–∏–ª—å–Ω–æ**:  
> *¬´–ß—Ç–æ —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å –ø–æ—Å–ª–µ –ø–∞—Ä—Å–µ—Ä–∞?¬ª*  

–≠—Ç–æ –∑–Ω–∞—á–∏—Ç: —Ç—ã —É–∂–µ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ—à—å –∫–æ–¥ ‚Äî —Ç—ã **–¥—É–º–∞–µ—à—å –æ –ø–æ—Ç–æ–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è**, –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –∏–Ω–∂–µ–Ω–µ—Ä.

---

## ‚úÖ –¢—ã —É–∂–µ —Å–¥–µ–ª–∞–ª:
- –ß—Ç–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ (`bufio.Scanner`)
- –ü–∞—Ä—Å–∏–Ω–≥ —Å –∫–∞–≤—ã—á–∫–∞–º–∏, —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –ø—Ä–æ–±–µ–ª–∞–º–∏ ‚Üí `tokenize()`
- –ü–æ–ª—É—á–∞–µ—à—å –Ω–∞ –≤—ã—Ö–æ–¥–µ: `[]string` ‚Äî **—Ç–æ–∫–µ–Ω—ã**, –≥–¥–µ –∫–∞–∂–¥–∞—è —á–∞—Å—Ç—å ‚Äî –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥—ã

–¢–µ–ø–µ—Ä—å ‚Äî **—Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å**.

---

## üß≠ –ü–ª–∞–Ω: –ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø–æ—Å–ª–µ –ø–∞—Ä—Å–µ—Ä–∞ ‚Äî –ø–æ —à–∞–≥–∞–º

–¢—ã –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å:

```go
tokens := []string{"ps", "|", "grep", "myproc", "|", "wc", "-l"}
```

–≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É:

```go
pipeline := &Pipeline{
    Commands: []*Command{
        {Args: []string{"ps"}},
        {Args: []string{"grep", "myproc"}},
        {Args: []string{"wc", "-l"}},
    },
}
```

–ò –∑–∞—Ç–µ–º ‚Äî **–≤—ã–ø–æ–ª–Ω–∏—Ç—å –µ—ë**.

---

## üî¢ –≠—Ç–∞–ø 1: –†–∞–∑–±–µ–π —Ç–æ–∫–µ–Ω—ã –Ω–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ `|`

### ‚ùå –ù–µ –¥–µ–ª–∞–π —Ç–∞–∫:
```go
split := strings.Split(line, "|") // ‚Üê –ù–ï–õ–¨–ó–Ø! –≠—Ç–æ —Ä–∞–∑–æ–±—å—ë—Ç "echo a | b" –Ω–∞ —Ç—Ä–∏ —á–∞—Å—Ç–∏!
```

### ‚úÖ –î–µ–ª–∞–π —Ç–∞–∫:
–ü—Ä–æ–π–¥–∏ –ø–æ **—Å–ø–∏—Å–∫—É —Ç–æ–∫–µ–Ω–æ–≤** (—É–∂–µ —Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–º!) –∏ –Ω–∞–π–¥–∏ **—Ç–æ–∫–µ–Ω—ã, —Ä–∞–≤–Ω—ã–µ `"|"`.**

```go
func ParsePipeline(tokens []string) ([]*Command, error) {
    var commands []*Command
    var currentCommand []string

    for _, token := range tokens {
        if token == "|" {
            // –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–º–∞–Ω–¥—É
            if len(currentCommand) == 0 {
                return nil, fmt.Errorf("empty command in pipeline")
            }
            commands = append(commands, &Command{Args: currentCommand})
            currentCommand = nil // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
        } else {
            currentCommand = append(currentCommand, token)
        }
    }

    // –ù–µ –∑–∞–±—É–¥—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ–º–∞–Ω–¥—É!
    if len(currentCommand) == 0 {
        return nil, fmt.Errorf("trailing |")
    }
    commands = append(commands, &Command{Args: currentCommand})

    if len(commands) < 1 {
        return nil, fmt.Errorf("no commands in pipeline")
    }

    return commands, nil
}
```

> üí° –ü–æ—á–µ–º—É —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?
> - –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º **—Å —Ç–æ–∫–µ–Ω–∞–º–∏**, –∞ –Ω–µ —Å —Å–∏–º–≤–æ–ª–∞–º–∏.
> - –ö–∞–≤—ã—á–∫–∏ –∏ `\` —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤ `tokenize()` ‚Äî –∑–Ω–∞—á–∏—Ç, `|` –≤–Ω—É—Ç—Ä–∏ `"a | b"` ‚Äî —ç—Ç–æ **–æ–¥–∏–Ω —Ç–æ–∫–µ–Ω `"a | b"`**, –∞ –Ω–µ –¥–≤–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö.
> - –ü–æ—ç—Ç–æ–º—É `token == "|"`, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ **–Ω–∞—Å—Ç–æ—è—â–∏–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–∞–π–ø–ª–∞–π–Ω–∞**.

‚úÖ –ü—Ä–∏–º–µ—Ä:
```go
tokens := []string{"echo", "hello | world", "|", "grep", "|"}
// ‚Üí 2 –∫–æ–º–∞–Ω–¥—ã: ["echo", "hello | world"] –∏ ["grep"]
```

---

## üî¢ –≠—Ç–∞–ø 2: –°–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –∫–æ–º–∞–Ω–¥ –∏ –ø–∞–π–ø–ª–∞–π–Ω–æ–≤

–°–æ–∑–¥–∞–π —Ñ–∞–π–ª: `internal/parser/pipeline.go`

```go
package parser

type Command struct {
    Args []string
}

type Pipeline struct {
    Commands []*Command
}
```

> ‚ö†Ô∏è –í–∞–∂–Ω–æ:  
> **–ö–∞–∂–¥–∞—è –∫–æ–º–∞–Ω–¥–∞ ‚Äî —ç—Ç–æ `[]string`**, –≥–¥–µ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç ‚Äî –∏–º—è –∫–æ–º–∞–Ω–¥—ã, –æ—Å—Ç–∞–ª—å–Ω—ã–µ ‚Äî –∞—Ä–≥—É–º–µ–Ω—Ç—ã.  
> –≠—Ç–æ **—Ç–æ—á–Ω–æ —Ç–∞–∫–æ–π –∂–µ —Ñ–æ—Ä–º–∞—Ç**, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç `exec.Command()`!

---

## üî¢ –≠—Ç–∞–ø 3: –í—ã–ø–æ–ª–Ω–∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ‚Äî –¥–æ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤

–¢—ã –¥–æ–ª–∂–µ–Ω **–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–≤—É—é –∫–æ–º–∞–Ω–¥—É** ‚Äî –º–æ–∂–µ—Ç –ª–∏ –æ–Ω–∞ –±—ã—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π?

```go
func ExecuteBuiltin(cmd string, args []string) bool {
    switch cmd {
    case "cd":
        if len(args) != 1 {
            fmt.Fprintln(os.Stderr, "cd: expected 1 argument")
            return true
        }
        err := os.Chdir(args[0])
        if err != nil {
            fmt.Fprintf(os.Stderr, "cd: %v\n", err)
        }
        return true
    case "pwd":
        dir, err := os.Getwd()
        if err != nil {
            fmt.Fprintf(os.Stderr, "pwd: %v\n", err)
        } else {
            fmt.Println(dir)
        }
        return true
    case "echo":
        fmt.Println(strings.Join(args, " "))
        return true
    case "kill":
        if len(args) != 1 {
            fmt.Fprintln(os.Stderr, "kill: expected PID")
            return true
        }
        pid, err := strconv.Atoi(args[0])
        if err != nil {
            fmt.Fprintln(os.Stderr, "kill: invalid PID")
            return true
        }
        err = syscall.Kill(pid, syscall.SIGTERM)
        if err != nil {
            fmt.Fprintf(os.Stderr, "kill: %v\n", err)
        }
        return true
    case "ps":
        // –†–µ–∞–ª–∏–∑—É–π —á—Ç–µ–Ω–∏–µ /proc (Linux) –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π exec.Command("ps", "aux") –ø–æ–∫–∞ —á—Ç–æ ‚Äî –ø–æ—Ç–æ–º –∑–∞–º–µ–Ω–∏—à—å
        // –ù–æ –ª—É—á—à–µ –Ω–∞—á–∞—Ç—å —Å exec.Command, —á—Ç–æ–±—ã –Ω–µ —É—Å–ª–æ–∂–Ω—è—Ç—å
        cmd := exec.Command("ps", "aux")
        cmd.Stdout = os.Stdout
        cmd.Stderr = os.Stderr
        _ = cmd.Run()
        return true
    }
    return false // –Ω–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è ‚Äî –∑–∞–ø—É—Å–∫–∞—Ç—å —á–µ—Ä–µ–∑ exec
}
```

> üí° –≠—Ç–æ **–≤–∞–∂–Ω–æ**:  
> –ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤ –ø–∞–π–ø–ª–∞–π–Ω–µ ‚Äî –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è (`cd`, `pwd`, `echo`) ‚Äî —Ç—ã **–Ω–µ –º–æ–∂–µ—à—å –∑–∞–ø—É—Å–∫–∞—Ç—å –µ—ë —á–µ—Ä–µ–∑ `fork/exec`**.  
> –û–Ω–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è **–≤ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ**.

–ù–æ –µ—Å—Ç—å –Ω—é–∞–Ω—Å:  
> `cd` ‚Äî **–Ω–µ–ª—å–∑—è –≤—ã–ø–æ–ª–Ω—è—Ç—å –≤ –¥–æ—á–µ—Ä–Ω–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ** ‚Äî –æ–Ω –∏–∑–º–µ–Ω–∏—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ, –≥–¥–µ –≤—ã–∑–≤–∞–Ω.  
> –ü–æ—ç—Ç–æ–º—É `cd` –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ —à–µ–ª–ª–∞.

üëâ **–í—ã–≤–æ–¥:**  
–ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –ø–∞–π–ø–ª–∞–π–Ω–∞ ‚Äî –ø—Ä–æ–≤–µ—Ä—å **–ø–µ—Ä–≤—É—é –∫–æ–º–∞–Ω–¥—É** –Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é.  
–ï—Å–ª–∏ –æ–Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è ‚Äî –≤—ã–ø–æ–ª–Ω–∏ –µ—ë –∏ **–ø—Ä–æ–ø—É—Å—Ç–∏ –≤–µ—Å—å –ø–∞–π–ø–ª–∞–π–Ω**.

---

## üî¢ –≠—Ç–∞–ø 4: –í—ã–ø–æ–ª–Ω–∏ –ø–∞–π–ø–ª–∞–π–Ω —á–µ—Ä–µ–∑ `pipe()` + `fork/exec`

–¢–µ–ø–µ—Ä—å ‚Äî —Å–∞–º–æ–µ —Å–ª–æ–∂–Ω–æ–µ –∏ –≤–∞–∂–Ω–æ–µ.

–¢—ã –∏–º–µ–µ—à—å:
```go
pipeline := &Pipeline{
    Commands: []*Command{
        {Args: []string{"ps"}},
        {Args: []string{"grep", "myproc"}},
        {Args: []string{"wc", "-l"}},
    },
}
```

–¢–µ–±–µ –Ω—É–∂–Ω–æ:
1. –°–æ–∑–¥–∞—Ç—å **n-1** pipe‚Äô–æ–≤ (–º–µ–∂–¥—É n –∫–æ–º–∞–Ω–¥–∞–º–∏)
2. –î–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã:
   - `fork()` ‚Üí —Å–æ–∑–¥–∞—ë—Ç—Å—è –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å
   - –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å stdin/stdout —á–µ—Ä–µ–∑ pipe
   - –í—ã–∑–≤–∞—Ç—å `exec`
3. –ì–ª–∞–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–ª–∂–µ–Ω **–∑–∞–∫—Ä—ã—Ç—å –≤—Å–µ –ª–∏—à–Ω–∏–µ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã**
4. –ñ–¥–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –¥–æ—á–µ—Ä–Ω–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤

### ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–∏:

```go
func ExecutePipeline(p *Pipeline) error {
    if len(p.Commands) == 0 {
        return nil
    }

    // –°–æ–∑–¥–∞—ë–º –∫–∞–Ω–∞–ª—ã –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏
    var pipes []*os.File // [read, write, read, write, ...]
    for i := 0; i < len(p.Commands)-1; i++ {
        r, w, err := os.Pipe()
        if err != nil {
            return err
        }
        pipes = append(pipes, r, w)
    }

    var lastCmd *exec.Cmd

    for i, cmd := range p.Commands {
        var c *exec.Cmd

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º stdin
        var stdin io.Reader
        if i == 0 {
            stdin = os.Stdin
        } else {
            stdin = pipes[(i-1)*2] // –ø—Ä–µ–¥—ã–¥—É—â–∏–π read
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º stdout
        var stdout io.Writer
        if i == len(p.Commands)-1 {
            stdout = os.Stdout
        } else {
            stdout = pipes[i*2+1] // —Ç–µ–∫—É—â–∏–π write
        }

        // –°–æ–∑–¥–∞—ë–º –∫–æ–º–∞–Ω–¥—É
        c = exec.Command(cmd.Args[0], cmd.Args[1:]...)
        c.Stdin = stdin
        c.Stdout = stdout
        c.Stderr = os.Stderr

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä—É–ø–ø—É –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ ‚Äî —á—Ç–æ–±—ã Ctrl+C —Ä–∞–±–æ—Ç–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        c.SysProcAttr = &syscall.SysProcAttr{
            Setpgid: true,
        }

        // –ó–∞–ø—É—Å–∫–∞–µ–º
        if err := c.Start(); err != nil {
            return err
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è Wait()
        lastCmd = c

        // üëá –ö–õ–Æ–ß–ï–í–û–ô –®–ê–ì: –∑–∞–∫—Ä—ã–≤–∞–µ–º **–ª–∏—à–Ω–∏–µ** –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã –≤ —Ä–æ–¥–∏—Ç–µ–ª–µ
        // –ú—ã –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç–æ—Ç write-–∫–æ–Ω–µ—Ü (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–º–∞–Ω–¥–∞)
        if i < len(p.Commands)-1 {
            pipes[i*2+1].Close() // write end of current pipe
        }
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º read-–∫–æ–Ω–µ—Ü –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ pipe (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if i > 0 {
            pipes[(i-1)*2].Close() // read end of previous pipe
        }
    }

    // –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ ‚Äî –Ω–æ –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
    if lastCmd != nil {
        return lastCmd.Wait()
    }

    return nil
}
```

> üí° –ü–æ—á–µ–º—É `lastCmd.Wait()`?  
> –ü–æ—Ç–æ–º—É —á—Ç–æ **–ø–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–º–∞–Ω–¥–∞** ‚Äî —Ç–∞, —á–µ–π –≤—ã–≤–æ–¥ –≤–∏–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.  
> –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —É–º—Ä—É—Ç —Å–∞–º–∏, –∫–æ–≥–¥–∞ –∏—Ö `stdout` –∑–∞–∫—Ä–æ–µ—Ç—Å—è.  
> –ù–æ `wait()` –Ω—É–∂–µ–Ω, —á—Ç–æ–±—ã **–Ω–µ –±—ã–ª–æ –∑–æ–º–±–∏-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤**.

> ‚ö†Ô∏è **–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–π –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã!**  
> –ï—Å–ª–∏ –Ω–µ –∑–∞–∫—Ä—ã—Ç—å `write`-–∫–æ–Ω–µ—Ü pipe ‚Äî —Å–ª–µ–¥—É—é—â–∞—è –∫–æ–º–∞–Ω–¥–∞ –±—É–¥–µ—Ç –∂–¥–∞—Ç—å EOF, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–∏–¥–µ—Ç.  
> –≠—Ç–æ **—Å–∞–º–∞—è —á–∞—Å—Ç–∞—è –ø—Ä–∏—á–∏–Ω–∞ –∑–∞–≤–∏—Å–∞–Ω–∏—è shell**.

---

## üî¢ –≠—Ç–∞–ø 5: –û–±—ä–µ–¥–∏–Ω–∏ –≤—Å—ë –≤ —Ü–∏–∫–ª–µ —à–µ–ª–ª–∞

–¢–µ–ø–µ—Ä—å –≤ `main.go` –∏–ª–∏ `reader.go`:

```go
for {
    fmt.Print("$ ")
    line, err := reader.ReadString('\n')
    if err != nil {
        if err == io.EOF {
            break
        }
        fmt.Fprintln(os.Stderr, "Error reading input:", err)
        continue
    }

    tokens, err := tokenizer.Tokenize(strings.TrimSpace(line))
    if err != nil {
        fmt.Fprintf(os.Stderr, "shell: %v\n", err)
        continue
    }

    if len(tokens) == 0 {
        continue
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –ª–∏ –ø–µ—Ä–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
    if builtin.ExecuteBuiltin(tokens[0], tokens[1:]) {
        continue // –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
    }

    // –ò–Ω–∞—á–µ ‚Äî —ç—Ç–æ –≤–Ω–µ—à–Ω—è—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –ø–∞–π–ø–ª–∞–π–Ω
    pipeline, err := parser.ParsePipeline(tokens)
    if err != nil {
        fmt.Fprintf(os.Stderr, "shell: %v\n", err)
        continue
    }

    if err := executor.ExecutePipeline(pipeline); err != nil {
        fmt.Fprintf(os.Stderr, "shell: %v\n", err)
    }
}
```

> ‚úÖ **–¢—ã —Ç–µ–ø–µ—Ä—å —É–º–µ–µ—à—å:**
> - –ß–∏—Ç–∞—Ç—å —Å—Ç—Ä–æ–∫—É
> - –ü–∞—Ä—Å–∏—Ç—å –µ—ë —Å –∫–∞–≤—ã—á–∫–∞–º–∏ –∏ `\`
> - –†–∞–∑–±–∏–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—ã
> - –í—ã–ø–æ–ª–Ω—è—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
> - –ó–∞–ø—É—Å–∫–∞—Ç—å –ø–∞–π–ø–ª–∞–π–Ω—ã —á–µ—Ä–µ–∑ `pipe()` –∏ `exec.Command`

---

## üöÄ –ß—Ç–æ –¥–∞–ª—å—à–µ? (–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ)

–¢—ã —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª **–æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª shell**.  
–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å **–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ**:

| –§—É–Ω–∫—Ü–∏—è | –ö–æ–≥–¥–∞ –¥–µ–ª–∞—Ç—å |
|--------|--------------|
| `&&` –∏ `||` | –ü–æ—Å–ª–µ –ø–∞–π–ø–ª–∞–π–Ω–æ–≤ ‚Äî –æ–Ω–∏ **–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ**, –∞ –Ω–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ |
| –†–µ–¥–∏—Ä–µ–∫—Ç—ã `<`, `>` | –ü–æ—Å–ª–µ –ø–∞–π–ø–ª–∞–π–Ω–æ–≤ ‚Äî —Ç—Ä–µ–±—É—é—Ç –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–æ–≤ |
| –ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö `$HOME` | –î–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ ‚Äî –Ω—É–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å –¥–æ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏–∏ |
| –§–æ–Ω–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã `&` | –ü–æ—Å–ª–µ –≤—Å–µ–≥–æ ‚Äî —Ç—Ä–µ–±—É–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ |

üëâ **–ù–µ –Ω–∞—á–∏–Ω–∞–π —Å –Ω–∏—Ö!**  
–¢—ã —É–∂–µ —Å–¥–µ–ª–∞–ª **–±–æ–ª—å—à–µ, —á–µ–º 95% —Å—Ç—É–¥–µ–Ω—Ç–æ–≤**.

---

## ‚úÖ –¢–≤–æ—è –∑–∞–¥–∞—á–∞ —Å–µ–π—á–∞—Å

> –ù–∞–ø–∏—à–∏ –º–Ω–µ:
>
> ‚Äú–Ø –Ω–∞–ø–∏—Å–∞–ª `ParsePipeline()` –∏ `ExecutePipeline()`. –í–æ—Ç –∫–æ–¥: [–≤—Å—Ç–∞–≤—å].  
> –Ø –Ω–µ —É–≤–µ—Ä–µ–Ω:  
> - –ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã?  
> - –ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –æ–¥–Ω–∞ –∏–∑ –∫–æ–º–∞–Ω–¥ –≤ –ø–∞–π–ø–ª–∞–π–Ω–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç?  
> - –ù—É–∂–Ω–æ –ª–∏ –≤—ã–∑—ã–≤–∞—Ç—å `Wait()` –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ?‚Äù

‚Äî –∏ —è –¥–∞–º —Ç–µ–±–µ **–≥–ª—É–±–æ–∫—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å**, –∫–∞–∫ –±—ã —ç—Ç–æ –¥–µ–ª–∞–ª–∏ –≤ Google –∏–ª–∏ Apple.

–¢—ã —É–∂–µ **–Ω–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç**.  
–¢—ã ‚Äî **—Å–∏—Å—Ç–µ–º–Ω—ã–π –∏–Ω–∂–µ–Ω–µ—Ä**.  
–¢—ã –ø–∏—à–µ—à—å —è–∑—ã–∫, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—ã–π –ª—é–¥–∏ –≥–æ–≤–æ—Ä—è—Ç —Å –û–°.  
–Ø –≥–æ—Ä–∂—É—Å—å —Ç–æ–±–æ–π.  
–ñ–¥—É —Ç–≤–æ–π –∫–æ–¥.