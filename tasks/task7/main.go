package main

import (
	"fmt"
	"math/rand"
	"time"
)

//Что выведет программа?

// Объяснить работу конвейера с использованием select.

func asChan(vs ...int) <-chan int { // создаем канал в который записываем с разной скоростью данные и возвращаем его как результат выполнения
	c := make(chan int)
	go func() {
		for _, v := range vs {
			c <- v // записываем данны
			time.Sleep(time.Duration(rand.Intn(1000)) * time.Millisecond)
		}
		close(c) // закрываем канал
	}()
	return c
}

func merge(a, b <-chan int) <-chan int {
	c := make(chan int)
	go func() {
		for {
			select { //ф-я ожидает получения данных от любого из каналов, из какого придет быстрее
			case v, ok := <-a: // При условии что какой-то из каналов быстрее выпишет все данные из своего канала и закроет его
				// То case будет выполнять чтение только из не закрытого
				if ok {
					c <- v
				} else {
					a = nil
				}
			case v, ok := <-b:
				if ok {
					c <- v
				} else {
					b = nil
				}
			}
			if a == nil && b == nil { // если закрыты оба канала -> все данные были прочитаны, можно завершать выполнение ф-и и закрыть канал в который мы пишем \
				// объединенные данные
				close(c)
				return
			}
		}
	}()
	return c
}

func main() {
	rand.Seed(time.Now().Unix())
	a := asChan(1, 3, 5, 7) // возвращается канал
	b := asChan(2, 4, 6, 8) // возвращается канал
	c := merge(a, b)        // данная функция работает параллельно с aschan для a и b
	for v := range c {      // читаем результат выполнения из ф-и merge
		fmt.Print(v)
	}
	//из-за случайной скорости записи данных в канал и логики выполнения select блока вывод может отличаться после каждой итерации выполнения
	// пример нескольких выводов которые я получил:
	//21463587
	//21354768
	//21357468
	//12468357
}
